/=  /= //
= //
= / -> //
= /###/##\\#/
= 
= /###/ SYSTEM BLOCK /
=   /'-7;/'-6;'-6;/
=   /'-6;/'-5;'-5;/
=   /'-5;/'-4;'-4;/
=   /'-4;/'-3;'-3;/
=   /'-3;/'-2;'-2;/
=   /'-2;/'-1;'-1;/
=   /'-1;/\\\\/
= 
=   /[8]/'-7;'-6;'-5;'-4;'-3;'-2;'-1;\//
=   /[7]/[8]/
=   /[6]/[7]/
=   /[5]/[6]/
=   /[4]/[5]/
=   /[3]/[4]/
=   /[2]/[3]/
= 
=   /###/ FOR POINTER /
=   />'4;/'-4;>/
=   />'3;/>'4;/
=   />'2;/>'3;/
=   />'1;/>'2;/
= 
=   /###/ FOR STOP POINTER /
=   /#'4;/'-4;#/
=   /#'3;/#'4;/
=   /#'2;/#'3;/
=   /#'1;/#'2;/
= 
=   /###/ FOR CONSTANTS /
=   /}'3;/'-4;}/
=   /}'2;/}'3;/
=   /}'1;/}'2;/
= 
=   /###/ NUMBERS /
=   /{1}/^/
=   /{2}/{1}^/
=   /{3}/{2}^/
=   /{4}/{3}^/
=   /{5}/{4}^/
=   /{6}/{5}^/
=   /{7}/{6}^/
=   /{8}/{7}^/
=   /{9}/{8}^/
=   /{X}/{9}^/
= 
=   /###/ OUTPUT HELPERS /
=   /[print] //
=   /[log] /[LOG]: /
=   /[br]/
/
= 
= 
= /###/ CORE BLOCK /
=   /###/ R8 - Complex injector2  /
=   /###/ _sort :: R3 (_sort:m_tmp) -> (R2 -> (R1 -> R6)) /
= 
= 
= 
=  /###/ R6 - Define <complex injector1> to R3 /
=   /###/ _flip :: R6 (_flip:tmp) -> R5 /
=   /<_flip>/
=     [5]{+_flip:cur_tmp}{+flip:stop}[5]{+flip:stop}{+_flip:tmp}[5]
=     [5]{+_flip:cur_tmp}A[5]A{+_flip:cur_tmp}[5]
=     [5]{+_flip:cur_tmp}B[5]B{+_flip:cur_tmp}[5]
=     [5]{+_flip:cur_tmp}C[5]C{+_flip:cur_tmp}[5]
=     [5]{+_flip:cur_tmp}D[5]D{+_flip:cur_tmp}[5]
=     /
=   /{+_flip:cur_tmp}/{+flip:cur}{+_flip:tmp}/
=   /{+_flip:tmp}/{_flip:tmp}'2;/
= 
= /###/ R3 - Func with param (template generator) /
=   /###/ flip :: R3 (flip:name) -> (R2 -> R1)
=    ###    Multiply calling func
=    ###    Multiply pointer for func
=    ###    Func body code
=    ###    Func end code (removing pointers) 
=    ###    Helper values /
=   /<flip>/
=     [3][{+flip:name}^[3][+{+flip:name}][{+flip:name}[3]
=     [3]#{+flip:name}^[3]#{+flip:name}>#{+flip:name}[3]
=     [3][+{+flip:name}][3]
=       <flip:A>
=       <flip:B>
=       <flip:C>
=       <flip:D>
=       [3]
=     [3][{+flip:name}][3]
=       [4]{+flip:cur}{+flip:stop}[4]{+flip:stop}[4]
=       [4]{+flip:stop}[4][4]
=       [3]
=     /
= 
=   /<flip:A>/<_flip>/ -> /{_flip:tmp}'1;/A/
=   /<flip:B>/<_flip>/ -> /{_flip:tmp}'1;/B/
=   /<flip:C>/<_flip>/ -> /{_flip:tmp}'1;/C/
=   /<flip:D>/<_flip>/ -> /{_flip:tmp}'1;/D/
= 
=   /{+flip:cur}/#{+flip:name}>'4;/
=   /{+flip:stop}/<{+flip:name}#/
=   /{+flip:name}/{flip:name}'2;/
= 
= 
= 
=   /###/ sort :: R3 (sort:name) -> (R2 -> R1) /
=   /<_sort>/
=     [3]<_sT:{_sort:m_tmp}'2;>[3]
=       [7]{+_sort:ctt}{_sort:m_tmp}'2;[7]{_sort:m_tmp}'2;{+_sort:ctt}[7]
=       [3]
=     [3]<_sF:{_sort:m_tmp}'2;>[3]
=       [7]{+_sort:ctt}{_sort:m_tmp}'2;[7]{+_sort:cft}{_sort:m_tmp}'2;[7]
=       [3]
=     /
= 
=   /<_sort:A>/<_sort>/ -> /{_sort:m_tmp}'1;/A/ -> <_sort:A>
=   /<_sort:B>/<_sort>/ -> /{_sort:m_tmp}'1;/B/ -> <_sort:B>
=   /<_sort:C>/<_sort>/ -> /{_sort:m_tmp}'1;/C/ -> <_sort:C>
=   /<_sort:D>/<_sort>/ -> /{_sort:m_tmp}'1;/D/ -> <_sort:D>
=   /<_sort:E>/<_sort>/ -> /{_sort:m_tmp}'1;/E/ -> <_sort:E>
= 
= 
=   /{+_sort:ctt}/{+sort:cur}{_sort:tmp}'2;/
=   /{+_sort:cft}/{_sort:tmp}'2;{+sort:cur}/
= 
=   /<sort>/
=     <multiply_sort>
=     [3][+{+sort:name}][3]
=       <sort:A>
=       <sort:B>
=       <sort:C>
=       <sort:D>
=       <sort:E>
=       [3]
=     [3][{+sort:name}][3]
=       [4]{+sort:cur}[4][4]
=       [3]
=     /
=       /<multiply_sort>/
=         [3][{+sort:name}^[3][+{+sort:name}][{+sort:name}[3]
=         [3]#{+sort:name}^[3]#{+sort:name}>#{+sort:name}[3]
=         /
= 
=   /<sort:A>/<_sF:A><_sF:B><_sF:C><_sF:D><_sF:E>/ -> /{_sort:tmp}'1;/A/
=   /<sort:B>/<_sT:A><_sF:B><_sF:C><_sF:D><_sF:E>/ -> /{_sort:tmp}'1;/B/
=   /<sort:C>/<_sT:A><_sT:B><_sF:C><_sF:D><_sF:E>/ -> /{_sort:tmp}'1;/C/
=   /<sort:D>/<_sT:A><_sT:B><_sT:C><_sF:D><_sF:E>/ -> /{_sort:tmp}'1;/D/
=   /<sort:E>/<_sT:A><_sT:B><_sT:C><_sT:D><_sF:E>/ -> /{_sort:tmp}'1;/E/
= 
= 
=   /{+sort:cur}/#{+sort:name}>'4;/
=   /{+sort:name}/{sort:name}'2;/
= 
= 
=   /###/ upper :: R3 (upper:name) -> (R2 -> R1) /
=   /<upper>/
=     [3][{+upper:name}^[3][+{+upper:name}][{+upper:name}[3]
=     [3][+{+upper:name}][3]
=       [4]{+upper:cur}a[4]A{+upper:cur}[4]
=       [4]{+upper:cur}b[4]B{+upper:cur}[4]
=       [4]{+upper:cur}c[4]C{+upper:cur}[4]
=       [4]{+upper:cur}d[4]D{+upper:cur}[4]
=       [4]{+upper:cur}e[4]E{+upper:cur}[4]
=       [3]
=     [3][{+upper:name}][3]
=       [4]{+upper:cur}[4][4]
=       [3]
=     /
=     /{+upper:cur}/#{+upper:name}>'4;/
=     /{+upper:name}/{upper:name}'2;/
= 
= 
=   /###/ lover :: R3 (lover:name) -> (R2 -> R1) /
=   /<lover>/
=     [3][{+lover:name}^[3][+{+lover:name}][{+lover:name}[3]
=     [3][+{+lover:name}][3]
=       [4]{+lover:cur}A[4]a{+lover:cur}[4]
=       [4]{+lover:cur}B[4]b{+lover:cur}[4]
=       [4]{+lover:cur}C[4]c{+lover:cur}[4]
=       [4]{+lover:cur}D[4]d{+lover:cur}[4]
=       [3]
=     [3][{+lover:name}][3]
=       [4]{+lover:cur}[4][4]
=       [3]
=     /
=     /{+lover:cur}/#{+lover:name}>'4;/
=     /{+lover:name}/{lover:name}'2;/
= 
=   /###/ init :: R3 (init:name) -> R0 /
=   /<init>/
=     [log] Init functions for: {init:name}'2;[br]
=   /
= 
= 
= /###/ --------------------------------------------------------------
=  ###  USER FRENDLY BLOCK 
=  ###  --------------------------------------------------------------/
= 
= 
= /###/ R2 - Simple funs (R2) | Call R3 with param  /
=   /###/ setTime :: R2 -> R1 /
=   /[setTime]/
=     [2]{time}'1;[2]05.06.2025, pidor[2]
=     /
= 
=   /###/ init:fst :: R2 -> R1 /
=     /###/ fst:upper :: R1 /
=     /###/ fst:sort  :: R1 /
=   /[init:fst]/<init><upper><sort>/
=     /{init:name}'1;/fst/
=     /{sort:name}'1;/fst:sort/
=     /{upper:name}'1;/fst:upper/
= 
=   /[init:snd]/<init><upper><lover><flip>/
=     /{init:name}'1;/snd/
=     /{flip:name}'1;/snd:flip/
=     /{upper:name}'1;/snd:upper/
=     /{lover:name}'1;/snd:lover/
= 
= 
= /###/ R1 - Simple replace (SR) | Define {val} (DV) | Call R2 (CR2) | R1(CR2) /
= /###/ INPUT /
=   /{text1}/becdccdaedbdc/
=   /{text2}/abcd/
= 
=   [setTime]
=   [init:fst]
=   [init:snd]
= 
= 
=   /###/ R1(CR2) /
=   [fst:upper{X}]
=   [fst:sort{X}{4}]
=     /###/ R1(DV) /
=     /{fst:result}/
=       #fst:sort{X}{4}>
=       #fst:upper>
=       {text1}
=       /
= 
= 
=   [snd:upper{X}{X}]
=   [snd:flip{X}{X}]
=   [snd:lover{X}{X}]
=     /{snd:result}/
=       #snd:lover>
=       #snd:flip{X}{X}>
=         #snd:upper>
=         {text2}
=       <snd:flip#
=       /
= 
=   /###/ R1(SR) /
=   /pidor/*ban*/
= 
= 
= /###/ R0 - Text | Values /
=   [log] {time} '-1;[br]
=   [print] Upper result:    {fst:result}[br]
=   [print] Reversed result: {snd:result}[br]