/=  /= //
= //
= / -> //
= /###/##\\#/
= 
= /###/ SYSTEM BLOCK /
=   /'-7;/'-6;'-6;/
=   /'-6;/'-5;'-5;/
=   /'-5;/'-4;'-4;/
=   /'-4;/'-3;'-3;/
=   /'-3;/'-2;'-2;/
=   /'-2;/'-1;'-1;/
=   /'-1;/\\\\/
= 
=   /[8]/'-7;'-6;'-5;'-4;'-3;'-2;'-1;\//
=   /[7]/[8]/
=   /[6]/[7]/
=   /[5]/[6]/
=   /[4]/[5]/
=   /[3]/[4]/
=   /[2]/[3]/
= 
=   /###/ FOR POINTER /
=   />'4;/'-4;>/
=   />'3;/>'4;/
=   />'2;/>'3;/
=   />'1;/>'2;/
= 
=   /###/ FOR STOP POINTER /
=   /#'4;/'-4;#/
=   /#'3;/#'4;/
=   /#'2;/#'3;/
=   /#'1;/#'2;/
= 
=   /###/ FOR CONSTANTS /
=   /}'3;/'-4;}/
=   /}'2;/}'3;/
=   /}'1;/}'2;/
= 
=   /###/ NUMBERS /
=   /{1}/^/
=   /{2}/{1}^/
=   /{3}/{2}^/
=   /{4}/{3}^/
=   /{5}/{4}^/
=   /{6}/{5}^/
=   /{7}/{6}^/
=   /{8}/{7}^/
=   /{9}/{8}^/
=   /{X}/{9}^/
= 
=   /###/ OUTPUT HELPERS /
=   /[print] //
=   /[log] /[LOG]: /
=   /[br]/
/
= 
= 
= /###/ CORE BLOCK /
=   /###/ R8 - Complex injector2  /
=   /###/ _sort :: R3 (_sort:M) -> (R2 -> R7) /
=   /<_sort>/
=     [3]<_sortT:{_sort:M}'2;>[3]
=       [8]{+_sort:s}{_sort:M}'2;[8]{_sort:M}'2;{+_sort:s}[8]
=       [3]
=     [3]<_sortF:{_sort:M}'2;>[3]
=       [8]{+_sort:s}{_sort:M}'2;[8]{+_sort:j}{_sort:M}'2;[8]
=       [3]
=   /
= 
=   /###/ _sort:* :: R2 -> (R1 -> R6) /
=     /###/ _sortT:* :: R6 -> R5 /
=     /###/ _sortF:* :: R6 -> R5 /
=   /<_sort:A>/<_sort>/ -> /{_sort:M}'1;/A/ -> <_sort:A>
=   /<_sort:B>/<_sort>/ -> /{_sort:M}'1;/B/ -> <_sort:B>
=   /<_sort:C>/<_sort>/ -> /{_sort:M}'1;/C/ -> <_sort:C>
=   /<_sort:D>/<_sort>/ -> /{_sort:M}'1;/D/ -> <_sort:D>
= 
=   /{+_sort:s}/{+sort:r}{+_sort:t}/
=   /{+_sort:j}/{+_sort:t}{+sort:r}/
=   /{+_sort:t}/{_sort:tmp}'2;/
= 
=   /###/ sort:* :: R5 -> R4 /
=   /<sort:A>/<_sortF:A><_sortF:B><_sortF:C><_sortF:D>/ -> /{_sort:tmp}'1;/A/
=   /<sort:B>/<_sortT:A><_sortF:B><_sortF:C><_sortF:D>/ -> /{_sort:tmp}'1;/B/
=   /<sort:C>/<_sortT:A><_sortT:B><_sortF:C><_sortF:D>/ -> /{_sort:tmp}'1;/C/
=   /<sort:D>/<_sortT:A><_sortT:B><_sortT:C><_sortF:D>/ -> /{_sort:tmp}'1;/D/
= 
= 
=  /###/ R6 - Define <complex injector1> to R3 /
=   /###/ _flip :: R6 (_flip:tmp) -> R5 /
=   /<_flip>/
=     [6]{+_flip:s}{+flip:l}[6]{+flip:l}{+_flip:t}[6]
=     [6]{+_flip:s}A[6]A{+_flip:s}[6]
=     [6]{+_flip:s}B[6]B{+_flip:s}[6]
=     [6]{+_flip:s}C[6]C{+_flip:s}[6]
=     [6]{+_flip:s}D[6]D{+_flip:s}[6]
=     /
=   /{+_flip:s}/{+flip:r}{+_flip:t}/
=   /{+_flip:t}/{_flip:tmp}'2;/
= 
=   /###/ flip:* :: R5 -> R4 /
=   /<flip:A>/<_flip>/ -> /{_flip:tmp}'1;/A/
=   /<flip:B>/<_flip>/ -> /{_flip:tmp}'1;/B/
=   /<flip:C>/<_flip>/ -> /{_flip:tmp}'1;/C/
=   /<flip:D>/<_flip>/ -> /{_flip:tmp}'1;/D/
= 
= 
= 
= /###/ R4 - Simple template for R3 /
= 
= 
= /###/ R3 - Func with param (template generator) /
=   /###/ flip :: R3 (flip:name) -> (R2 -> R1)
=    ###    Multiply calling func
=    ###    Multiply pointer for func
=    ###    Func body code
=    ###    Func end code (removing pointers) 
=    ###    Helper values /
=   /<flip>/
=     [3][{+flip:n}^[3][+{+flip:n}][{+flip:n}[3]
=     [3]#{+flip:n}^[3]#{+flip:n}>#{+flip:n}[3]
=     [3][+{+flip:n}][3]
=       <flip:A>
=       <flip:B>
=       <flip:C>
=       <flip:D>
=       [3]
=     [3][{+flip:n}][3]
=       [4]{+flip:r}{+flip:l}[4]{+flip:l}[4]
=       [4]{+flip:l}[4][4]
=       [3]
=     /
=   /{+flip:r}/#{+flip:n}>'4;/
=   /{+flip:l}/<{+flip:n}#/
=   /{+flip:n}/{flip:name}'2;/
= 
=   /###/ sort :: R3 (sort:name) -> (R2 -> R1) /
=   /<sort>/
=     [3][{+sort:n}^[3][+{+sort:n}][{+sort:n}[3]
=     [3]#{+sort:n}^[3]#{+sort:n}>#{+sort:n}[3]
=     [3][+{+sort:n}][3]
=       <sort:A>
=       <sort:B>
=       <sort:C>
=       <sort:D>
=       [3]
=     [3][{+sort:n}][3]
=       [4]{+sort:r}[4][4]
=       [3]
=     /
=     /{+sort:r}/#{+sort:n}>'4;/
=     /{+sort:n}/{sort:name}'2;/
= 
=   /###/ upper :: R3 (upper:name) -> (R2 -> R1) /
=   /<upper>/
=     [3][{+upper:n}^[3][+{+upper:n}][{+upper:n}[3]
=     [3][+{+upper:n}][3]
=       [4]{+upper:r}a[4]A{+upper:r}[4]
=       [4]{+upper:r}b[4]B{+upper:r}[4]
=       [4]{+upper:r}c[4]C{+upper:r}[4]
=       [4]{+upper:r}d[4]D{+upper:r}[4]
=       [3]
=     [3][{+upper:n}][3]
=       [4]{+upper:r}[4][4]
=       [3]
=     /
=     /{+upper:r}/#{+upper:n}>'4;/
=     /{+upper:n}/{upper:name}'2;/
= 
= 
=   /###/ lover :: R3 (lover:name) -> (R2 -> R1) /
=   /<lover>/
=     [3][{+lover:n}^[3][+{+lover:n}][{+lover:n}[3]
=     [3][+{+lover:n}][3]
=       [4]{+lover:r}A[4]a{+lover:r}[4]
=       [4]{+lover:r}B[4]b{+lover:r}[4]
=       [4]{+lover:r}C[4]c{+lover:r}[4]
=       [4]{+lover:r}D[4]d{+lover:r}[4]
=       [3]
=     [3][{+lover:n}][3]
=       [4]{+lover:r}[4][4]
=       [3]
=     /
=     /{+lover:r}/#{+lover:n}>'4;/
=     /{+lover:n}/{lover:name}'2;/
= 
=   /###/ init :: R3 (init:name) -> R0 /
=   /<init>/
=     [log] Init functions for: {init:name}'2;[br]
=   /
= 
= 
= /###/ --------------------------------------------------------------
=  ###  USER FRENDLY BLOCK 
=  ###  --------------------------------------------------------------/
= 
= /###/ INPUT /
=   /{len}/{X}{X}{X}{X}/
=   /{text}/bcdccdadbdc/
=   /{text2}/dacdab/
= 
= /###/ R2 - Simple funs (R2) | Call R3 with param  /
=   /###/ setTime :: R2 /
=   /[setTime]/
=     [2]{time}'2;[2]05.06.2025, pidor[2]
=     /
= 
=   /###/ init:fst :: R2 -> R1 /
=     /###/ fst:upper :: R1 /
=     /###/ fst:sort  :: R1 /
=   /[init:fst]/<init><upper><sort>/
=     /{init:name}'1;/fst/
=     /{sort:name}'1;/fst:sort/
=     /{upper:name}'1;/fst:upper/
=     [init:fst]
= 
=   /[init:snd]/<init><upper><lover><flip>/
=     /{init:name}'1;/snd/
=     /{flip:name}'1;/snd:flip/
=     /{upper:name}'1;/snd:upper/
=     /{lover:name}'1;/snd:lover/
=     [init:snd]
= 
= 
= /###/ R1 - Simple replace (SR) | Define {val} (DV) | Call R2 (CR2) /
=   /###/ R1(CR2) /
=   [setTime]
= 
=   /###/ R1(SR) /
=   /pidor/*ban*/
= 
=   /###/ R1(CSF) /
=   [fst:upper{X}]
=   [fst:sort{X}{4}]
= 
=   /###/ R1(DV) /
=   /{fst:result}/
=     #fst:sort{X}{4}>
=     #fst:upper>
=     {text}
=     /
= 
=   [snd:upper{X}{X}]
=   [snd:flip{X}{X}]
=   [snd:lover{X}{X}]
= 
=   /{snd:result}/
=     #snd:lover>
=     #snd:flip{X}{X}>
=       #snd:upper>
=       {text2}
=     <snd:flip#
=     /
= 
= 
= /###/ R0 - Text | Values /
=   [log] {time}[br]
=   [print] Upper result:    {fst:result}[br]
=   [print] Reversed result: {snd:result}[br]